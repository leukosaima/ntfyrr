name: docker
on:
  workflow_dispatch: {}
  release:
    types:
      - published

permissions:
  contents: write
  packages: write

jobs:
  docker:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Docker tags and labels
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ github.event.repository.full_name }}
            ghcr.io/${{ github.event.repository.full_name }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=ref,event=pr
          flavor: |
            latest=${{ github.event.release.prerelease == false }}

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Set platforms
        run: |
          echo "PLATFORMS=linux/amd64,linux/arm64" >> $GITHUB_ENV

      - name: Publish Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ env.PLATFORMS }}
          push: true 
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Check manifest
        run: |
          docker buildx imagetools inspect ${{ github.event.repository.full_name }}:${{ steps.meta.outputs.version }}

      - name: Inspect image
        run: |
          docker pull ${{ github.event.repository.full_name }}:${{ steps.meta.outputs.version }}
          docker image inspect ${{ github.event.repository.full_name }}:${{ steps.meta.outputs.version }}

      - name: Update previous release to remove latest tag
        if: github.event_name == 'release' && github.event.release.prerelease == false
        run: |
          # Get the previous release (skip the current one)
          PREV_RELEASE=$(gh api repos/${{ github.repository }}/releases \
            --jq '.[] | select(.prerelease == false and .id != ${{ github.event.release.id }}) | .id' \
            | head -n 1)
          
          if [ -n "$PREV_RELEASE" ]; then
            PREV_BODY=$(gh api repos/${{ github.repository }}/releases/$PREV_RELEASE --jq .body)
            # Remove the latest tag line
            UPDATED_BODY=$(echo "$PREV_BODY" | sed '/- `latest`/d')
            
            gh api repos/${{ github.repository }}/releases/$PREV_RELEASE \
              -X PATCH \
              -f body="$UPDATED_BODY"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update release with Docker links
        if: github.event_name == 'release'
        run: |
          RELEASE_BODY=$(cat << 'EOF'
          ## Docker Images
          
          Pull the image:
          ```bash
          docker pull ${{ github.event.repository.full_name }}:${{ steps.meta.outputs.version }}
          ```
          
          Or use GitHub Container Registry:
          ```bash
          docker pull ghcr.io/${{ github.event.repository.full_name }}:${{ steps.meta.outputs.version }}
          ```
          
          Available tags:
          - `${{ steps.meta.outputs.version }}`
          EOF
          )
          
          # Add latest tag info only for stable releases
          if [ "${{ github.event.release.prerelease }}" == "false" ]; then
            RELEASE_BODY="${RELEASE_BODY}\n          - \`latest\`"
          fi
          
          CURRENT_BODY=$(gh api repos/${{ github.repository }}/releases/${{ github.event.release.id }} --jq .body)
          NEW_BODY="${CURRENT_BODY}
          
          ${RELEASE_BODY}"
          
          gh api repos/${{ github.repository }}/releases/${{ github.event.release.id }} \
            -X PATCH \
            -f body="${NEW_BODY}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
